% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code-assign-control.R
\name{r2c_if}
\alias{r2c_if}
\alias{if_true}
\alias{if_false}
\alias{if_test}
\title{If / Else Counterparts}
\usage{
r2c_if(true, false)

if_true(expr)

if_false(expr)

if_test(cond)
}
\arguments{
\item{true}{expression to evaluate if previous \code{if_test} is TRUE.}

\item{false}{expression to evaluate if previous \code{if_test} is FALSE}

\item{expr}{an expression to evaluate}
}
\value{
for \code{if_true} and \code{if_false}, the result of evaluating \code{expr}, for
\code{if_test} the result of evaluating \code{test} if that is length 1 (otherwise an
error)
}
\description{
"Internal" functions that integrate the \verb{if / else} construct between the R
and C level.  These are purely an implementation detail and not intended to
be used directly, but are documented so users can understand what they are if
they encounter them when inspect "r2c_fun" objects.
}
\details{
Most R level calls are converted 1-1 into C level calls.  Control structures
are more complicated because we need to generate the call structure itself
without a direct correspondence of R call to structural element.  The
preprocessor decomposes regular \verb{if / else} calls such as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{if(a) x else y
}\if{html}{\out{</div>}}

Into:

\if{html}{\out{<div class="sourceCode">}}\preformatted{if_test(a)
r2c_if(if_true(x), if_false(y))
}\if{html}{\out{</div>}}

The decomposition creates a 1-1 R-C correspondence without changing the
overall semantics (although the intermediate semantics are not the same due
to the use of implicit state to decide what branch to evaluate).  You can
run these functions as R functions, but there is no reason to do so, and
further \code{r2c_if} will always return the true branch as the state from
\code{if_test} is not recorded in pure R evaluation.  There is only a loose
correspondence between the R function names and the C code they cause to be
generated as we exploit how \code{r2c} linearizes the AST to cause the pieces of
the control structure to be emitted at the right spots (i.e.  this is a hack
to get control flow to fit into an implementation that originally did not
intend to allow them).
}
\examples{
get_r_code(r2cq(if(a) b else c), raw=TRUE)
}
