% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/window.R
\name{window_exec}
\alias{window_exec}
\title{Execute r2c Function on Sliding Windows in Data}
\usage{
window_exec(
  fun,
  width,
  data,
  MoreArgs = list(),
  by = 1L,
  partial = FALSE,
  align = "center",
  enclos = parent.frame()
)
}
\arguments{
\item{fun}{an "r2c_fun" function as produced by \code{\link{r2c}}, except with the
additional restriction that it must be guaranteed to produce scalar
results when accounting for the other parameters used by this function.}

\item{width}{integer vector of positive, non-NA values interpreted
as window widths of values to supply to \code{fun} from the \code{data}
vectors.  Recycled together with \code{by} to match the length of the \code{data}
vectors.}

\item{data}{a numeric vector, or a list of numeric vectors, each vector the
same length as the vector(s) in \code{groups}.  If a named list, the vectors
will be matched to \code{fun} parameters by those names.  Elements without names
are matched positionally.  If a list must contain at least one element.
Conceptually, this parameter is used similarly to \code{envir} parameter to
\code{\link[base:eval]{base::eval}} when that is a list (see \code{enclos}).}

\item{MoreArgs}{a list of R objects to pass on as group-invariant arguments
to \code{fun}.  Unlike with \code{data}, each of the objects therein are passed in
full to the native code for each group.  This is useful for arguments that
are intended to remain constant group to group.  Matching of these objects
to \code{fun} parameters is the same as for \code{data}, with positional matching
occurring after the elements in \code{data} are matched.}

\item{by}{integer vector of positive, non-NA values interpreted as the stride
to increment the base index after each \code{fun} application  Recycled together
with \code{width} to match the length of the \code{data} vectors.}

\item{partial}{TRUE or FALSE (default), whether to allow computation on
partial windows. If \code{FALSE}, incomplete windows will be NA.  If \code{TRUE}
vectors passed to \code{fun} may have lengths shorter than the corresponding
window sizes when the windows are partially out of bounds at the end of the
\code{data} vectors.}

\item{align}{vector of one of "center" (default), "left", "right", or a
positive integer representing what part of the window aligns with the base
index on the vector, where "left" is the part of the window nearest the
first element of the vector.  Integer values represent the left-wards
offset of the "left" end of the window relative to the base index, where
\code{0L} is equivalent to "left" and \code{width - 1L} equivalent to "right".  For
even length windows, the window will have one more element to the right
than to the left of the base index.  It is not possible to j
See details.}

\item{enclos}{environment to use as the \code{enclos} parameter to
\code{\link[base:eval]{base::eval}} when evaluating expressions or matching calls (see \code{data}).}
}
\value{
a numeric vector the same length as the first vector in \code{data}.
}
\description{
Calls the native code associated with \code{fun} on sequential windows along the
\code{data} vectors.  The windows are aligned relative to a base index that starts
at the first row (or first vector element when \code{data} is a numeric vector)
of \code{data} and increments with the stride specified in \code{by}.  Window widths,
alignments, and strides can be specified as varying vectors.
}
\details{
There are no special optimizations beyond the use of \code{{r2c}} functions
over regular R functions.  For wide windows there are more efficient
solutions depending on the statistic applied.  For example, for rolling means
and a few other simple statistics \code{{data.table}} offers the "on-line"
algorithm and \code{{slider}} the "segment tree" algorithm, each with different
performance and precision trade-offs.

The semantics of this function are \strong{loosely} modelled on those of
\code{zoo::rollapply}, with additional modifications based on
\code{slider::slide_index}.

A visual illustration of the effect of the \code{align} parameter on the fourth
iteration of function application, with \code{by=1L} and \code{width=4}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{       +--------- Base index = 4
       v
 1 2 3 4 5 6 7    seq_along(x)  # `x` represents 1st vector in `data`
       + - - +    align = "left"
       + - - +    align = 0L
 + - - +          align = "right"
 + - - +          align = 3L
     + - - +      align = "center"
     + - - +      align = 1L
   + - - +        align = 2L
}\if{html}{\out{</div>}}
}
\seealso{
\code{\link{r2c}} for more details on the behavior and constraints of
"r2c_fun" functions, \code{\link[base:eval]{base::eval}} for the semantics of \code{enclos}.
}
