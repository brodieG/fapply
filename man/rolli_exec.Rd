% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/window.R
\name{rolli_exec}
\alias{rolli_exec}
\title{Compute on Sequential Regular Windows on Equidistant Data}
\usage{
rolli_exec(
  fun,
  data,
  n,
  by = 1L,
  align = "center",
  partial = FALSE,
  MoreArgs = list(),
  enclos = parent.frame()
)
}
\arguments{
\item{fun}{an "r2c_fun" function as produced by \code{\link{r2c}}, except with the
additional restriction that it must be guaranteed to produce scalar
results as used with this function.}

\item{data}{a numeric vector, or a list of equal length numeric
vectors.  If a named list, the vectors will be matched to \code{fun} parameters
by those names.  Elements without names are matched positionally.  If a
list must contain at least one vector.  Conceptually, this parameter is
used similarly to \code{envir} parameter to \code{\link[base:eval]{base::eval}} when that is a list
(see \code{enclos}).}

\item{n}{integer number of adjacent data "elements" to compute \code{fun} on.
It is called \code{n} and not \code{width} to emphasize it is a discrete count
instead of an interval width as in \code{\link{rollby_exec}} and friends.  Must be
scalar, or have as many elements as data (see "Data Elements").  For the
latter, specifies the element counts of each window.  Coerced to integer if
numeric.}

\item{by}{strictly positive scalar integer interpreted as the stride to
increment the "anchor" after each \code{fun} application.  Coerced to integer if
numeric.}

\item{align}{scalar character one of "center" (default), "left", or "right",
indicating what part of the window should align to the base index.
Alternatively, a scalar integer where \code{0} is equivalent to "left", \code{1 - n}
equivalent to "right", and \code{(1 - n) \%/\% 2} is equivalent to "center" (i.e.
represents the offset of the window relative to its anchor).}

\item{partial}{TRUE or FALSE (default), whether to allow computation on
partial windows that extent out of either end of the data.}

\item{MoreArgs}{a list of R objects to pass on as iteration-invariant
arguments to \code{fun}.  Unlike with \code{data}, each of the objects therein are
passed in full to the native code for each iteration  This is useful for
arguments that are intended to remain constant across iterations.  Matching
of these objects to \code{fun} parameters is the same as for \code{data}, with
positional matching occurring after the elements in \code{data} are matched.}

\item{enclos}{environment to use as the \code{enclos} parameter to
\code{\link[base:eval]{base::eval}} when evaluating expressions or matching calls (see \code{data}).}
}
\value{
a numeric vector of length \code{length(first_vec(data)) \%/\% by}.
}
\description{
A \link[=runners]{runner} that calls the native code associated with \code{fun} on
sequential regularly spaced windows along the \code{data} vector(s).  Each window
is aligned relative to a specific data "element" (anchor), and the set of
window size \code{n} contiguous elements around and including the "anchor" are
computed on.  This is a special case of \code{\link{rollby_exec}} intended to mimic the
semantics of \code{zoo::rollapply} where \code{width} is a scalar integer, and
implicitly the data elements are equally spaced.
}
\section{Window Alignment}{


\code{align} specifies which end of the window aligns with the anchor.  Here we
illustrate on the fourth iteration of a call to \code{rolli_exec}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{## rolli_exec(..., data=1:7,  n=4)
       +--------- On the 4th iteration, anchor is 4
       v
 1 2 3 4 5 6 7    | seq_along(first_vec(data))
       |
       |            Align     In-Window Elements
       * * * *    | "left"    \{4, 5, 6, 7\}
     * * * *      | "center"  \{3, 4, 5, 6\}  <- default
 * * * *          | "right"   \{1, 2, 3, 4\}
}\if{html}{\out{</div>}}

For the case of "center" with even sized windows more elements will be to the
right than to the left of the anchor.
}

\section{Correspondence to \code{\link{rollby_exec}}}{


\code{rolli_exec} is a slightly more efficient implementation of:

\if{html}{\out{<div class="sourceCode">}}\preformatted{function(fun, data, n, align, ...)
  roll_by_exec(
    fun, data,
    width=n - 1,
    offset=((match(align, c('left', 'center', 'right')) - 1) / 2) * (1 - n)
    bounds="[]",
    ...
   )
}\if{html}{\out{</div>}}

Window element counts correspond to an interval width as \code{n - 1}, e.g.:

\if{html}{\out{<div class="sourceCode">}}\preformatted{1  2  3     |  n = 3
[     ]     |  width = 3 - 1 = 2 = n - 1
}\if{html}{\out{</div>}}

Unlike \code{rolli_exec}, \code{\link{rollby_exec}} only supports fixed width windows.

The \code{align} values correspond to numeric values as follows: "left"
to \code{0}, "center" to \code{-width/2}, and "right" to \code{-width}.  The default window
alignment is equivalent to "left" for \code{\link{rollby_exec}}, which is different
than for this function.

[     ]: R:\%20\%20\%20\%20\%20
\code{\link{rollby_exec}}: R:\%60rollby_exec\%60
\code{\link{rollby_exec}}: R:\%60rollby_exec\%60
}

\section{Data Elements}{


\code{data} is made up of "elements", where an "element" is a vector element if
\code{data} is an atomic vector, or a "row" if it is a "data.frame" / list of
equal-length atomic vectors.  Elements of \code{data} are arrayed on the real line
by \code{position}.  The default is for each element to be located at its integer
rank, i.e. the first element is at 1, the second at 2, and so on.  Rank
position is the sole and implicit option for \code{\link{rolli_exec}}, which will be
more efficient for that case, slightly so for \code{by = 1}, and more so for
larger values of \code{by}.
}

\examples{
r2c_mean <- r2cq(mean(x))
with(
  mtcars,
  rolli_exec(r2c_mean, hp, n=5)
)
r2c_len <- r2cq(length(x))

## Effect of align and partial
dat <- runif(5)
rolli_exec(r2c_len, dat, n=5, align='left', partial=TRUE)
rolli_exec(r2c_len, dat, n=5, align='center', partial=TRUE)
rolli_exec(r2c_len, dat, n=5, align='right', partial=TRUE)
rolli_exec(r2c_mean, dat, n=5, align='left')

## Variable length windows
rolli_exec(r2c_len, dat, n=c(1,3,1,3,1), align='left', partial=TRUE)
}
\seealso{
\code{\link{r2c}} for more details on the behavior and constraints of
"r2c_fun" functions, \code{\link[base:eval]{base::eval}} for the semantics of \code{enclos}.

Other runners: 
\code{\link{group_exec}()},
\code{\link{rollby_exec}()}
}
\concept{runners}
