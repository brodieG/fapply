% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{loaded_r2c_dynlibs}
\alias{loaded_r2c_dynlibs}
\alias{unload_r2c_dynlibs}
\title{Manage \code{r2c} Dynamic Libraries}
\usage{
loaded_r2c_dynlibs()

unload_r2c_dynlibs(except = character())
}
\arguments{
\item{except}{character vector of dynamic library names as produced by
\code{loaded_r2c_dynlibs} to exclude from unloading.}
}
\description{
List or unload \code{r2c} loaded dynamic libraries.  These functions are helpful
for managing situations where there is a sufficiently large number of \code{r2c}
functions created (hundreds) that there is a risk of exhausting the number of
allowed open dynamic libraries (see note for \code{\link[base:dynload]{base::dyn.load}}).
}
\details{
"r2c_fun" functions are designed to unload their associated dynamic libraries
when they are garbage collected, but in our experience garbage collection on
them is difficult to predict or force. The intended use of these function is
to record loaded \code{r2c} dynamic libraries that we wish to preserve prior
to creating a set that we wish to use and discard.  Once we are done with the
discardable set, we drop all \code{r2c} dynamic libraries that were not part of
the previously recorded list (see examples).

\code{r2c} dynamic libraries are recognized solely by matching their names against
the regular expression pattern \code{"^r2c-[a-z0-9]{10}$"}.  All such libraries
missing from the \code{except} parameter will be unloaded by \code{unload_r2c_dynlibs},
even if they were not created by \code{r2c}.  Any \code{r2c} function that has its
associated dynamic library unloaded will cease to work, so it only makes
sense to unload libraries for functions known to be deleted.
}
\examples{
except <- loaded_r2c_dynlibs()
tmp.r2c.fun <- r2cq(sum(x))
tmp.r2c.fun(1:10)
rm(tmp.r2c.fun)
gc()                        # gc should unload lib, but it often doesn't
unload_r2c_dynlibs(except)  # force unload
}
\seealso{
\link{r2c-compile} for details on "r2c_fun" functions, \code{\link{get_so_loc}} to
retrieve original dynamic library file system location from and "r2c_fun"
object, \code{\link[base:dynload]{base::dyn.unload}}, \code{\link[base:getLoadedDLLs]{base::getLoadedDLLs}}.
}
