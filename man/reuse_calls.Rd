% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim.R
\name{reuse_calls}
\alias{reuse_calls}
\title{Identify Repeated Calls and Reuse First Instance}
\usage{
reuse_calls(x)
}
\arguments{
\item{x}{a call}
}
\value{
a list with elements:
\itemize{
\item x: the call with the re-used expressions substituted
\item reuse: named list with names the variables that reference the expressions
that are substituted, and values those expressions.
}
}
\description{
Complex statistics often re-use a simpler statistic multiple times, providing
the opportunity to optimize them by storing the result of the simple
statistic instead of recomputing it.  This function detects reuses of
sub-calls and modifies the call tree to implement the store-and-reuse
optimization.
}
\details{
While this function is intended primarily for use as a pre-processing
optimization for \code{r2c}, it can be applied to R expressions generally with
some important caveats.  \code{r2c} should work correctly with all \code{r2c}
compatible R expressions, but is not guaranteed to do so with all R
expressions.  In particular, any expressions with side effects are likely to
cause problems.  Simple assignments like \verb{<-} or \code{=} are safe in cases where
there is no ambiguity about the order in which they would be made (e.g.
\code{{a <- b; b <- a}} is safe, but \code{fun(a <- b, b <- a)} might not be).  \code{r2c}
allows only the unambiguous cases for the "r2c_fun" functions, but that is
enforced by the \link[=r2c-compile]{compilation functions}, not by \code{reuse_calls}.
Nested scopes will also trick \code{reuse_calls} (e.g. use of \code{local}, in-lined
functions).

Sub-calls are compared by equality of their deparsed forms after symbols are
disambiguated to account for potential re-assignment.  \code{reuse_calls} is
conservative about branches, assuming that variables might be set to
different values by different branches.  This might void substitutions that
at run-time would have turned out to be valid, and even some that could have
been known to be valid with more sophisticated static analysis (e.g.
\code{if(TRUE) ... else ...} will be treated as a branch even though it is not
really).  Substitutions involving loop modified variables are also limited
due to the possibility of their value changing during e.g.  the first and
nth loop iteration, or the possibility of the loop not running at all.

\code{reuse_calls} relies on functions being bound to their original symbols, so
do not expect it to work correctly if e.g. you rebind \verb{<-} to some other
function.  \code{r2c} checks this in its own use.
}
\examples{
x <- runif(100)
y <- runif(100)
slope <- quote(((x - mean(x)) * (y - mean(y))) / (x - mean(x))^2)
(slope.r <- reuse_calls(slope))
identical(eval(slope), eval(slope.r))

intercept <- quote(
  mean(y) - mean(x) * ((x - mean(x)) * (y - mean(y))) / (x - mean(x))^2
)
(intercept.r <- reuse_calls(intercept))
identical(eval(intercept), eval(intercept.r))
}
