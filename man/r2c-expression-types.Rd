% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r2c-package.R
\name{r2c-expression-types}
\alias{r2c-expression-types}
\title{Iteration Varying and Constant Expressions}
\description{
\code{r2c} \link{runners} will vary which parts of their \code{data} argument are computed
on across iterations, so references to values from \code{data} are known as
iteration varying (varying).  Expressions that depend directly or indirectly
on such references are also known as varying, and those that do not are
known as constant.  Some \code{r2c} \link[=r2c-supported-funs]{implemented function}
parameters will only accept constant expressions.
}
\details{
\code{r2c} uses constant parameters to allow for semantics otherwise precluded by
its \link[=r2c-memory]{pre-allocated memory} design.  Normally, \code{r2c} requires that
the size of the output of an expression be derivable from the \strong{size} of its
inputs alone, as is the case with e.g.  \code{seq_along(x)}.  But many useful
functions require knowing the value of their inputs to compute output size,
e.g.  \code{seq_len(x)}.  \code{r2c} can implement functions like the latter when the
input value is constant because such values can be computed in R before any
runner iterations are executed (see examples).

Constant expressions passed to constant parameters are evaluated once at
allocation time and cached.  In addition to re-use of the cached value across
iterations, these values are also re-used if the same expression appears for
a different constant parameter.  Due to the caching, constant expressions
that cause side-effects, use \code{eval}, manipulate frames, or engage in other
complex "meta" operations may have different effects than intended.  Constant
expressions passed to constant parameters may evaluate to any R object,
subject to the restrictions on the \code{r2c} function parameter they are matched
to.

Every expression provided to a constant parameter must be constant, but
varying parameters will accept otherwise constant expressions if they abide
by the general \code{r2c} constraints on parameter values.  For simplicity of
implementation, constant expressions used with varying parameters are treated
as varying, thus not cached.  This may change in the future.
}
\examples{
## Constant parameter `times` takes expression `max(y)` as argument
f <- r2cq(rep(x, times=max(y)))
g <- factor(c('a','b', 'b'))
## When `y` is constant, so is `max(y)` and this works
group_exec(f, data=list(x=1:3), groups=g, MoreArgs=list(y=2:4))
## But if we make `y` varying, it does not
try(group_exec(f, data=list(x=1:3, y=2:4), groups=g))
}
\seealso{
Other r2c-topics: 
\code{\link{r2c-control-structures}},
\code{\link{r2c-memory}},
\code{\link{r2c-package}},
\code{\link{r2c-performance}},
\code{\link{r2c-preprocess}},
\code{\link{r2c-supported-funs}},
\code{\link{runners}}
}
\concept{r2c-topics}
\keyword{internal}
