% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{r2c}
\alias{r2c}
\alias{r2cq}
\title{Compile Eligible R Calls Into Native Instructions}
\usage{
r2c(
  call,
  dir = NULL,
  check = getOption("r2c.check.result", FALSE),
  quiet = getOption("r2c.quiet", TRUE),
  clean = is.null(dir)
)

r2cq(
  call,
  dir = NULL,
  check = getOption("r2c.check.result", FALSE),
  quiet = getOption("r2c.quiet", TRUE),
  clean = is.null(dir)
)
}
\arguments{
\item{call}{an R expression, for \code{r2cq} it is captured unevaluated, for
\code{r2c} it should be quoted with e.g. \code{\link{quote}}.  See details.}

\item{dir}{NULL (default), or character(1L) name of a file system directory
to store the shared object file in.  If NULL a temporary directory will be
used. The shared object will also be loaded, and if \code{dir} is NULL the
directory with the file will be removed after loading.  Currently the
capability to re-use generated shared objects across R sessions is not
formally supported, but can likely be arranged for by preserving the
directory.}

\item{check}{TRUE or FALSE (default), if TRUE will evaluate the R expression
with the input data and compare that result to the one obtained from the
\code{r2c} C code evaluation, marking the result with attributes that indicate
that the result was identical, and if not, also with an attribute with the
result of an \code{all.equal} comparison.  The check is only carried out when an
\code{r2c} function is invoked directly (see example).}

\item{quiet}{whether to suppress the compilation output.}

\item{clean}{TRUE or FALSE, whether to remove the \code{dir} folder containing the
generated C code and the shared object file after the shared object is
\code{\link{dyn.load}}ed.  Normally this is an auto-generated temporary folder.  This
will only delete folders that have the same directory root as one generated
by \code{tempfile()} to avoid accidents.  If you manually provide \code{dir} you will
need to manually delete the directory yourself.}
}
\value{
an "r2c_fun" function; this is an unusual function so please see
details.
}
\description{
Translates eligible R calls into C, compiles them into native instructions
using \verb{R CMD SHLIB}, and returns an interface to that code in the form of an
"r2c_fun" function.  Unlike the R function, it carries
out numerical calculations with \code{r2c} native instructions instead
of with the standard R routines, and most importantly it is compatible with
\code{r2c} \link[=runners]{runner functions}.
}
\details{
While "r2c_fun" functions can be called in the same way as normal R
functions, there is limited value in doing so.  "r2c_fun" functions are
optimized to be invoked invoked indirectly with \link{runners}.  In many common
cases it is likely that using an "r2c_fun" directly instead of with a runner
will be slower than evaluating the corresponding R expression.

Parameters for "r2c_fun" functions are the free symbols in \code{call} in the order
they appear in the call tree.  Be sure to check the parameters of the
resulting "r2c_fun" to avoid surprises from unexpected parameter order.
Future \code{{r2c}} release will allow specification of parameter order.

The structure of "r2c_fun" objects is subject to change without notice in
future \code{r2c} releases.  The only supported uses of them are standard
invocation with the \code{(} operator and use with \code{r2c} functions that accept
them as inputs.

Currently the following functions are supported in \code{call}:
\itemize{
\item Binary operators: \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
\item Statistics: \code{mean}, \code{sum}, \code{length}.
}

\code{call} and all sub-calls it comprises must be in the form \code{fun(...)} or for
operators \verb{a fun b} where \code{fun} is the unquoted name of the function (i.e.
not \code{"fun"(...)} or many of the other variations that R will normally allow
for function invocation).  Functions must be bound to their original
symbols for them to be recognized.  Symbols used as parameters to \code{call}
and its constituent sub-calls (e.g. the \code{x} and \code{y} in \code{sum(x) + y}) will
become parameters to the "r2c_fun" function.  There must be at least one such
symbol in \code{call}.  Symbol order in the "r2c_fun" parameter list is based on
order of appearance in the call tree after everything is \code{\link{match.call}}ed.
\code{.R2C.DOTS} and any symbols that match the regular expression
\code{"^\\\\.ARG[0-9]+$"} are reserved for use by \code{r2c} and thus disallowed in
\code{call}.

Parameters used with "r2c_fun" supported functions are categorized into data
parameters and control parameters.  For example, in \code{sum(x, na.rm=TRUE)}, \code{x}
is considered a data parameter and \code{na.rm} a control parameter.  All data
parameters must be attribute-less numeric vectors.  Integer vectors are
supported, but they are coerced to numeric (and thus copied) before use.  If
all data inputs are integer and the R counterpart functions in \code{call} support
integer output, the result will be returned as integer by coercing (thus
copying) the otherwise numeric result to integer.  There are no general
type restrictions on control parameters, but each implemented function will
only accept values for them that would make sense for the R counterparts.

In general \code{r2c} attempts to mimic the corresponding R function semantics to
the \code{identical} level, but there may be corner cases that differ,
particularly those involving missing or infinite values.

\code{r2c} requires a C99 compatible implementation with floating point infinity
defined and the \code{R_xlen_t} range representable without precision loss as
double precision floating point.  It is unknown whether R supports C
implementations that fail this requirement, and if it does they are probably
rare.
}
\examples{
r2c_sum_add <- r2cq(sum(x + y))
r2c_sum_add <- r2c(quote(sum(x + y)))  ## equivalently
r2c_sum_add(1, runif(10))
r2c_sum_check <- r2cq(sum(x), check=TRUE)
## Checks are disabled when using runners
r2c_sum_check(1:10)                                 # checked
group_exec(r2c_sum_check, 1:10, groups=rep(1L, 10)) # not checked
}
\seealso{
\code{\link{runners}} to iterate "r2c_fun" functions on varying data,
\code{\link{get_c_code}} for functions to retrieve meta data from the function,
including the generated C code and the compiler output.
}
