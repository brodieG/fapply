% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{r2c}
\alias{r2c}
\alias{r2cq}
\title{Compile Eligible R Calls Into Native Instructions}
\usage{
r2c(call, dir = tempfile(), check = getOption("r2c.check.result", FALSE))

r2cq(call, dir = tempfile(), check = getOption("r2c.check.result", FALSE))
}
\arguments{
\item{call}{an R expression, for \code{r2cq} it is captured unevaluated, for
\code{r2c} it should be quoted with e.g. \code{\link{quote}}.}

\item{dir}{character(1L) name of a file system directory to store the shared
object file in.  The shared object will also be loaded, so the object file
does not need to be preserved unless a function is serialized for re-use
across sessions.  Currently such re-use is not well tested / supported, and
is unlikely to work well across different machines.}

\item{check}{TRUE or FALSE (default), if TRUE will evaluate the R expression
with the input data and compare that result to the one obtained from the
\code{r2c} C code evaluation, producing an error if not identical.}

\item{env}{environment to use as enclosure to function evaluation environment}

\item{r2c.fun}{an "r2c_fun" object to extract meta data from.}
}
\value{
an "r2c_fun" function; this is an unusual function so please see
details.
}
\description{
Translates eligible R calls into C, compiles them into native instructions
using \verb{R CMD SHLIB}, and returns an interface to that code in the form of an
"r2c_fun" function.  This function will behave like an R function that
has for body the provided \code{call} and for parameters the free parameter
symbols in the order they appear in the call tree.  Unlike the R function, it
will execute native instructions generated directly, and is compatible with
\code{r2c} runner functions like \code{\link{group_exec}}.
}
\details{
While "r2c_fun" functions can be called in the same way as normal R
functions, there is limited value in doing so.  Instead, they are intended to
be invoked indirectly with runners like \code{\link{group_exec}} (currently the only
one implemented).  The structure of "r2c_fun" objects is subject to change
without notice in future \code{r2c} releases.  The only supported uses of them
are standard invocation with the \code{(} operator and use with \code{r2c} functions
that accept them as inputs.

Currently the following functions are supported in \code{call}:
\itemize{
\item Binary operators: \code{+}, \code{-}, \code{*}, \code{/}, and \verb{\%}.
\item Statistics: \code{mean}, \code{sum}, \code{length}.
}

All calls present in \code{call} must be in the form \code{fun(...)} where \code{fun} is the
unquoted name of the function (i.e. not \code{"fun"(...)} or many of the other
variations that R will normally allow for function invocation).

Parameters used with "r2c_fun" supported functions are categorized into data
parameters and control parameters.  For example, in \code{sum(x, na.rm=TRUE)}, \code{x}
is considered a data parameter and \code{na.rm} a control parameter.  All data
parameters must be attribute-less numeric vectors.  Integer vectors are
supported, but they are coerced to numeric for all intermediate calculations.
If all data inputs are integer and the R counterpart functions in \code{call}
support integer output, the result will be returned as integer.
}
\note{
"r2c_fun" functions may not operate correctly if the \code{::} operator from
the base package is masked by the environment chain starting with \code{env}.
}
\examples{
r2c_sum_add <- r2cq(sum(x + y))
r2c_sum_add <- r2c(quote(sum(x + y))  ## equivalently
r2c_sum_add(1, runif(10))
}
\seealso{
\code{\link{group_exec}} to iterate this function groupwise on data,
\code{\link{get_c_code}} to retrieve the generate C code use to produce the native
instructions.
}
